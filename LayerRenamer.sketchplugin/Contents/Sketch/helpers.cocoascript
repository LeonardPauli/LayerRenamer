// helpers.cocoascript
// Sketch Plugins
// 
// Created by Leonard Pauli, jan 2017
// Copyright © Leonard Pauli, jan 2017
// 
var LOG_DEBUG = false

// createDynamicClassInstanceWithMethods(methods)
// methods: {'sayHey:with:': function(phrase, name) {log(phrase+' '+name+'!')}}
// -> object
// object.sayHey_with_("Hello", "Cocoa")
function createDynamicClassInstanceWithMethods(methods) {
	var uniqueClassName = "CocoaScript_DynamicClass_" + NSUUID.UUID().UUIDString();
	var delegateClassDesc = MOClassDescription.allocateDescriptionForClassWithName_superclass_(uniqueClassName, NSObject);
	delegateClassDesc.registerClass();

	var methodNames = Object.keys(methods)
	methodNames.forEach(function(selectorString) {
		var dynamicFunction = methods[selectorString]
		var selector = NSSelectorFromString(selectorString);
		delegateClassDesc.addInstanceMethodWithSelector_function_(selector, dynamicFunction);
	})

	var classInstance = NSClassFromString(uniqueClassName).new()
	return classInstance
}


function getLayerKind(obj) {
	var objClass = obj.class()
	if (objClass == MSLayerGroup)
		return 'Group'

	var str = NSStringFromClass(objClass)
	if (str.substr(0,2)=='MS') str = str.substr(2)
	if (str.substr(-5)=='Group' || str.substr(-5)=='Layer')
		str = str.substr(0,str.length-5)

	if (str=='SymbolInstance') return 'Symbol'
	if (str.length>5 && (str.substr(-5)=='Shape' || str=='ShapePath')) return 'Path'

	return str}


// Padder helper
function paddStringToLength(str, len, append, char) {
	char = char || ' '
	var txt = ''
	for (var i=Math.max(0,len-str.length); i>0; i--) txt+=char
	return append? str+txt: txt+str}


// Log helper
function dLog(str) {
	if (!LOG_DEBUG) return;
	log(str)}


// Alert helper
// opt: {
// 	title
// 	message
// 	width: 500 or fields: {
// 		_find: ['value', 'placeholder'], // no label
// 		replace: 'value and placeholder' // label: 'replace'
// 	}
// 	buttons: ['Cancel','OK'] // default ['OK']
// 	showHelp: function(_alert) {return true;} // default null
// 		// shows a help (?) button
// 	beforeShow: function(alert) {}
// 	-> .selected: {index, title}
// 	-> .canceled: false
// 	-> .fields.find.value
// 	-> .fields.replace.value
// }
var showAlert = function(opt) {
	if (!opt) return
	if (typeof opt == 'string')
		opt = {title:opt}

	var self = {}
	self._v = COSAlertWindow.new();
	self.rawAlert = self._v.alert()

	self._v.setMessageText(opt.title || '');
	self._v.setInformativeText(opt.message || '');

	// Fields
	self.fields = {}
	if (opt.fields) {
		var labels = Object.keys(opt.fields)

		var prevField = null, prevViewIndex = -1
		for (var i=0; i<labels.length; i++) {
			var label = labels[i]
			var value = opt.fields[label]
			var placeholder = value

			if (value instanceof Array) {
				placeholder = value[1] || ''
				value = value[0] || ''
			}

			var hideLabel = label.substr(0,1)=='_'
			if (!hideLabel) {
				self._v.addTextLabelWithValue(label); prevViewIndex++;}
			self._v.addTextFieldWithValue(value); prevViewIndex++;

			var field = self._v.viewAtIndex(prevViewIndex)
			field.setPlaceholderString(placeholder)
			field.index = i
			var fieldLabel = hideLabel ? label.substr(1) : label
			self.fields[fieldLabel] = field

			if (i==0) {
				self.rawAlert.window().setInitialFirstResponder(field)
			} else {
				prevField.setNextKeyView(field)
			}
			prevField = field
		}
	}

	// Buttons
	self.buttons = []
	opt.buttons = !opt.buttons || !opt.buttons.length ? ['OK'] : opt.buttons
	if (opt.buttons) {
		var titles = opt.buttons
		for (var i=0; i<titles.length; i++) {
			self._v.addButtonWithTitle(titles[i])
			self.buttons.push({
				index: i,
				title: titles[i]
			})
		}
	}

	// Help
	if (opt.showHelp) {
		self.rawAlert.showsHelp = true
		var delegate = createDynamicClassInstanceWithMethods({'alertShowHelp:': opt.showHelp})
		self.rawAlert.delegate = delegate
	}

	self._v.layout()

	// Set width
	if (opt.width && !opt.fields) {
		self.rawAlert.setAccessoryView(NSView.alloc().initWithFrame_(NSMakeRect(0, 0, opt.width, 0)))
	} else if (opt.width) {
		var frame = self.rawAlert.accessoryView().frame()
		frame.size.width = opt.width
		self.rawAlert.accessoryView().setFrame(frame)

		Object.keys(self.fields).forEach(function(key) {
			var field = self.fields[key]
			var frame = field.frame()
			frame.size.width = opt.width
			field.setFrame(frame)
		})
	}

	// Set icon
	if (opt.icon) {
		if (typeof opt.icon == "string")
			opt.icon = NSImage.alloc().initWithContentsOfFile(opt.icon)
		self.rawAlert.setIcon(opt.icon)
	}

	// Fix button shortcuts, and expose them
	var alertButtons = self.rawAlert.buttons()
	for (var i=0; i<alertButtons.count(); i++) {
		var alertButton = alertButtons[i]
		var button = self.buttons.find(function(button) {return button.index==i})
		if (!button) button = self.buttons.push({index:i, title: undefined})
		button._v = alertButton
		
		if (i>=1 && i<=3 && i<alertButtons.count()-1) {
			var mask = i==1? NSCommandKeyMask: i==2? NSAlternateKeyMask: NSShiftKeyMask
			// mask | NSControlKeyMask
			alertButton.setKeyEquivalentModifierMask(mask)
			alertButton.setKeyEquivalent('\r')
		}
	}

	// Show
	if (opt.beforeShow) opt.beforeShow(self)
	var selectedButtonIndex = self.rawAlert.runModal() - 1000
	self.selected = self.buttons.find(function (button) {return button.index == selectedButtonIndex})
	self.canceled = selectedButtonIndex==0

	// Collect field values
	var fieldLabels = Object.keys(self.fields)
	fieldLabels.forEach(function (fieldLabel) {
		var field = self.fields[fieldLabel]
		field.value = field.stringValue()
	})

	return self}