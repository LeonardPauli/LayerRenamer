// layerRenamer.sketchscript
// 
// Created by Leonard Pauli, jan 2017
// Copyright Leonard Pauli, jan 2017
// Initially inspired by Rodrigo Soares' RenameIt sketch plugin
// 

@import 'helpers.cocoascript'
var scriptPath = coscript.env().scriptURL.path().stringByDeletingLastPathComponent().stringByDeletingLastPathComponent()+'/'

//@import '/Users/leonardpauli/Projects/Experiments/Other/Sketch Plugins/LayerRenamer/LayerRenamer.sketchplugin/Contents/Sketch/helpers.cocoascript'
var copyPageOutlineToClipboard = function(context) {
	var doc = context.document
	var page = doc.currentPage()
	var selection = context.selection
	var selectionCount = selection.count()
	var selectionIsPage = selectionCount==0
	if (selectionIsPage) {
		selection = [page]
		selectionCount = 1}

	var defaultFlagsStr = 'pug'
	var userDefaults = NSUserDefaults.standardUserDefaults()
	var pastFlagsStr = userDefaults.objectForKey_("LayerRenamer-outline-flags-value") || defaultFlagsStr

	var alert = showAlert({
		title: 'Copy '+(selectionIsPage?'page':'selection')+' as outline',
		message: 'Protip: Use âŒ˜-âŽ‡-F to filter first. Some options are available; status (ie. include locked and hidden status), !path, kind, !textContent, pug',
		fields: {_flags:[defaultFlagsStr,'Optionally list onptions, like: kind status !path']},
		buttons: ['Copy','Cancel'],
		beforeShow: function (alert) {
			var rawAlert = alert._v.alert()
			
			var filePath = scriptPath+'Resources/icons/copyPageOutlineToClipboard.png'
			var image = NSImage.alloc().initWithContentsOfFile(filePath)
			rawAlert.setIcon(image)
		}
	})
	if (alert.selected.title=='Cancel') return;

	var flagsStr = alert.fields.flags.value
	if (!flagsStr.length()) flagsStr = defaultFlagsStr
	var flagKeys = flagsStr.split(' ')
	var flags = {
		path: true,
		textContent: true,
		status: false,
		kind: false,
		pug: false
	}
	flagKeys.forEach(function(key) {
		var value = key.split('=')
		key = value[0]
		value = value[1]
		if (key[0]=='!') {key=key.substr(1);value=false}
		else if (value===undefined) value = true
		flags[key] = value
	})

	var txt = ''
	var prefix = ''
	function addLayerSingleRow(layer, prefix) {
		var name = layer.name()
		var kind = getLayerKind(layer)
		if (flags.pug && kind=='Path') return;
		if (flags.pug && name=='bg' && kind=='Shape') return;
		txt += prefix
		if (flags.pug && name.substr(0,1).match(/[a-z]/))
			txt += '.'
		txt += name
		if (flags.kind) txt += ': '+kind
			//+(layer.isSelected()?' âœ“':'')
		if (flags.status) {
			txt += (layer.isLocked()?' ðŸ”’':'')
			txt += (!layer.isVisible()?' âˆ…':'')}
		if (flags.textContent && kind=='Text') {
			var strVal = layer.stringValue()+''
			txt+= (strVal.length>80)? '.\n'+prefix+'\t'+strVal: ' '
			txt+=strVal}
		txt += '\n'}

	var loopLayers = function(layers, prefix) {
		layers.slice().reverse().forEach(function(layer) {
			addLayerSingleRow(layer, prefix)

			if (!flags.path && getLayerKind(layer)=='Shape') return false;
			else if (layer.layers) loopLayers(layer.layers(), prefix+'\t')
		})
	}
	selection.forEach(function(layer) {
		addLayerSingleRow(layer, prefix)	
		loopLayers(layer.layers(), prefix+'\t')
	})

	NSPasteboard.generalPasteboard().clearContents()
	NSPasteboard.generalPasteboard().setString_forType_(txt, NSStringPboardType)
	doc.showMessage("Page outline copied to clipboard")

	// Save for later
	userDefaults.setObject_forKey_(flagsStr, "LayerRenamer-outline-flags-value")
}


var layerRenamerSelect = function(context) {
	dLog('ðŸ‘‰'+paddStringToLength('  Layer name', 24, true)
			 +paddStringToLength('Matches', 40, true)
			 +paddStringToLength('Expression', 40, true))
	var doc = context.document
	var page = doc.currentPage()
	var selection = context.selection
	var selectionCount = selection.count()

	// Get past values
	var defaultSearchStr = '^(.+)$'
	var defaultExpressionStr = '!artboard'
	var userDefaults = NSUserDefaults.standardUserDefaults()
	var pastSearchStr = userDefaults.objectForKey_("LayerRenamer-search-value") || defaultSearchStr
	var pastExpressionStr = userDefaults.objectForKey_("LayerRenamer-expression-value") || defaultExpressionStr
	if (pastSearchStr==defaultSearchStr) pastSearchStr = ''
	//if (pastExpressionStr==defaultExpressionStr) pastExpressionStr = ''

	var alert = showAlert({
		title: 'Search through and filter '+(selectionCount || 'all')+' layer'+(selectionCount==1 ? '' : 's'),
		message: 'Using RegExp and flags :)',
		fields: {
			_search: [pastSearchStr, 'What should the name match? Leave empty for all'],
			_expression: [pastExpressionStr, 'Try $1 > 3, %N < 4, %p.p.t == "grandparent name", and %x/y/w/h']},
		buttons: selectionCount==0? ['Filter All','Cancel'] : ['Search inside', 'Filter selected', 'Cancel'],
		showHelp: function (alert) {
			showRegExHelpAlert(true)
		},
		width: 400,
		icon: scriptPath+'Resources/icons/layerRenamerSelect.png'
	})
	if (alert.selected.title=='Cancel') return;

	var searchStr = alert.fields.search.value
	if (!searchStr.length()) searchStr = defaultSearchStr
	userDefaults.setObject_forKey_(searchStr, "LayerRenamer-search-value")

	// Take out relative selection path string
	var relativePathMatch = searchStr.match(/(?:[^\\]|^):([<>n\d+-]+)$/)
	var relativePath = relativePathMatch ? relativePathMatch[1] : null
	if (relativePath) searchStr = searchStr.substr(0,searchStr.length-relativePath.length-1)

	var reg = new RegExp(searchStr, 'i')
	var expressionStr = alert.fields.expression.value
	if (!expressionStr.length()) expressionStr = defaultExpressionStr
	userDefaults.setObject_forKey_(expressionStr, "LayerRenamer-expression-value")
	expressionStr = expressionStr.replace(/or/ig, '||').replace(/and/ig, '&&')

	var shouldFilterAll = alert.selected.title == 'Filter All'
	var shouldFilterSelected = alert.selected.title == 'Filter selected'
	var shouldFilterInside = alert.selected.title == 'Search inside'

	if (shouldFilterAll) {
		selection = page.layers()
		selectionCount = selection.count()
		shouldFilterSelected = shouldFilterInside = true}

	var layersToBeSelected = []
	var currIterationIdx = 0
	var handleLayer = function(layer, depth) {
		function digDeeper() {
			if (!layer.layers) return false;
			return layer.layers().some(function(layer) {
				return handleLayer(layer, depth+1)})}

		var name = layer.name()
		var matches = name.match(reg)
		if (!matches) {
			//layer.setIsSelected(false)
			if (shouldFilterInside) return digDeeper()
			else return false}
		//if (!shouldFilterInside && depth>0) return false;

		// Populate expression flags
		var str = replaceLayerExpressionFlags(expressionStr, layer, true, selectionCount, currIterationIdx)
		currIterationIdx++
		
		// Populate capture groups
		matches = matches.map(function(match, index) {
			if (!match) return 'null'
			var asNr = parseFloat(match)
			return isNaN(asNr)? '"'+match+'"': asNr})
		str = str.replace(/\$(\d+)/g, function(wholeMatch, nr) {
			var nr = parseInt(nr)
			return nr<matches.length ? matches[nr]: wholeMatch})

		// Setup expression variables
		var layerKindName = getLayerKind(layer)
		var vars = 'var '+'Shape/Group/Artboard/Page/Slice/Bitmap/Text/Symbol/SymbolMaster/Path'.split('/').map(function(name) {
			return name.toLowerCase()+'='+(layerKindName==name?'true':'false')
		}).join(', ')+';'
		vars += 'var '+'hidden'+'='+(!layer.isVisible()?'true':'false')+';'
		vars += 'var '+'locked'+'='+(layer.isLocked()?'true':'false')+';'

		// Try evaluate expression and (de)select current layer
		try {
			var res = eval(vars+str)
			var couldSelect = (shouldFilterSelected && depth==0) || (shouldFilterInside && depth>0)
			var shouldSelect =  couldSelect && !!res

			dLog((shouldSelect? 'âœ…': 'ðŸ˜¡')+paddStringToLength('  '+name, 24, true)
			 +paddStringToLength((!matches?'null':'['+matches.join(', ')+']'), 40, true)
			 +paddStringToLength(str, 40, true))

			//layer.setIsSelected(shouldSelect)
			if (shouldSelect) layersToBeSelected.push(layer)

			// Shape is really a group, even if it doesn't
			// look that way if it only contains one
			if (layerKindName=='Shape' && layer.layers().count()==1)
				return false

			if (layerKindName=='Group' || layerKindName=='Artboard') {
				if (shouldSelect || !shouldFilterInside) return false
			} else if (!shouldFilterInside && !res) return false
		} catch(e) {
			var alert = showAlert({
				title:'Expression error',
				message:
					'Layer: "'+name+'"'
					+'\nExpression: "'+str+'"'
					+'\nError: "'+e+'"',
				buttons: ['Abort', 'Continue']
			})
			if (alert.selected.title=='Abort')
				return true
			//layer.setIsSelected(false)
			return false;
		}

		return digDeeper()
	}
	selection.some(function(layer){return handleLayer(layer, 0)})



	var findLayersUsingRelativePath = function (baseLayers, path) {
		var layers = []
		var direction = path.match(/^:?(([<>])|((\d+n)?(([+-])?\d+)?))/)
		if (!direction) throw 'Path "'+path+'" isn\'t valid'
		var restPath = path.substr(direction[0].length)

		if (direction[2]=='<') {
			baseLayers.forEach(function(layer) {
				if (layer.parentGroup) {
					var parent = layer.parentGroup()
					if (layers.indexOf(parent)<0)
						layers.push(parent)
				}
			})
		} else if (direction[2]=='>') {
			baseLayers.forEach(function(layer) {
				if (layer.layers) layer.layers()
					.forEach(function(l) {layers.push(l)})
			})
		} else if (!direction[3] || !direction[3].length) { // containing group
			throw 'Path "'+path+'" isn\'t valid.'
		} else {
			var usingModulus = !!direction[4]
			var k = usingModulus? parseInt(direction[4]) : 1
			var m = direction[5]? parseInt(direction[5]) : 0
			var doRelative = direction[6]

			baseLayers.forEach(function(layer, idx) {
				var index = baseLayers.length-idx-1
				if (usingModulus) {
					if ((index+m)%k == 0)
						layers.push(layer)
				} else {
					if (!layer.parentGroup) return;
					var parent = layer.parentGroup()
					var siblings = parent.layers()

					var targetIdx = !doRelative? siblings.length-1-m : siblings.indexOf(layer) - m
					if (targetIdx<0) targetIdx += siblings.length
					if (targetIdx>=0 && targetIdx<siblings.length)
						layers.push(siblings[targetIdx])
				}
			})
		}

		return !restPath.length? layers:
			findLayersUsingRelativePath(layers, restPath)
	}


	var selectedTypesFreqs = {}
	var addLayerKindToFreqs = function(layerKindName) {
		if (!selectedTypesFreqs[layerKindName]) selectedTypesFreqs[layerKindName] = 0
		selectedTypesFreqs[layerKindName]++}

	layersToBeSelected = !relativePath? layersToBeSelected:
		findLayersUsingRelativePath(layersToBeSelected, relativePath)

	page.deselectAllLayers()
	layersToBeSelected.forEach(function(layer) {
		if (layer.isSelected()) return;
		addLayerKindToFreqs(getLayerKind(layer))
		layer.select_byExpandingSelection_(true, true)
	})


	// Message
	var selectedTypes = Object.keys(selectedTypesFreqs)
	var newSelectionCount = selectedTypes.reduce(function(p,v) {return p+selectedTypesFreqs[v]}, 0)
	var msg = ''
	if (newSelectionCount==0) msg += 'No layers where selected'
	else {
		msg += 'Selected '
		msg += newSelectionCount==1? 'one': newSelectionCount
		msg += ' '
		
		var ending = newSelectionCount==1?'':'s'
		if (!selectedTypes.length || selectedTypes.length>3) msg += 'layer'+ending
		else if (selectedTypes.length==1) msg += selectedTypes[0].toLowerCase()+ending
		else {
			selectedTypes.forEach(function(name,idx) {
				if (idx) msg += idx == selectedTypes.length-1 ? ' and ': ', '
				msg += name.toLowerCase()+ending})
		}
	}
		
	doc.showMessage(msg)
}

var layerRenamerRename = function(context) {
	var doc = context.document
	var selection = context.selection
	var selectionCount = selection.count()
	if (selectionCount == 0) {
		doc.showMessage('No layers selected - no layers to rename')
		return
	}

	// Get past values
	var userDefaults = NSUserDefaults.standardUserDefaults()
	var defaultFindStr = '(.+)'
	var defaultReplaceStr = '$1'
	var pastFindStr = userDefaults.objectForKey_("LayerRenamer-find-value") || defaultFindStr
	var pastReplaceStr = userDefaults.objectForKey_("LayerRenamer-replace-value") || defaultReplaceStr
	if (pastFindStr==defaultFindStr) pastFindStr = ''
	if (pastReplaceStr==defaultReplaceStr) pastReplaceStr = ''

	var alert = showAlert({
		title: 'Rename '+selectionCount+' layer'+(selectionCount==1 ? '' : 's'),
		message: 'Using RegExp :)',
		fields: {
			_find: [pastFindStr, 'What to search for? By default everything: (.+)'],
			_replace: [pastReplaceStr, 'Try $1, %N, %p.t, and %x/y/w/h']},
		buttons: ['Replace All','Cancel'],
		showHelp: function (alert) {
			showRegExHelpAlert(false)
		},
		width: 400,
		icon: scriptPath+'Resources/icons/layerRenamerRename.png',
		beforeShow: function (alert) {
			alert.rawAlert.window().setInitialFirstResponder(alert.fields.replace)
		}
	})
	if (alert.selected.title=='Cancel') return;

	var findStr = alert.fields.find.value
	if (!findStr.length()) findStr = defaultFindStr
	var reg = new RegExp(findStr, 'i')
	userDefaults.setObject_forKey_(findStr, "LayerRenamer-find-value")
	
	var replaceStr = alert.fields.replace.value
	if (!replaceStr.length()) replaceStr = ''
	userDefaults.setObject_forKey_(replaceStr, "LayerRenamer-replace-value")
	
	var nrOfReplaced = 0
	for (var i=0; i<selectionCount; i++) {
		var layer = selection[i]
		var nameOld = layer.name()

		var str = replaceLayerExpressionFlags(replaceStr, layer, false, selectionCount, i)

		var name = nameOld.replace(reg, str)
		if (nameOld!=name) nrOfReplaced++

		dLog(paddStringToLength(''+nameOld, 25, true)
			 +paddStringToLength(str, 40, true)
			 +paddStringToLength(name, 40, true))

		layer.setName(name)}

	if (selectionCount==nrOfReplaced && nrOfReplaced==1)
		doc.showMessage('Renamed the layer')
	else doc.showMessage('Renamed '
		+(selectionCount==nrOfReplaced?'all ':nrOfReplaced+' of ')
		+selectionCount+' layer' + (selectionCount==1?'':'s'))
}

function replaceLayerExpressionFlags(expression, layer, quoteStrings, selectionCount, i) {
	var zeroPad = function (template, source) {
		if (template.length<=1 || quoteStrings) return source
		var txt = ''+source
		if (txt.length>=template.length) return source
		for (var i=template.length-txt.length; i>0; i--) txt = '0'+txt
		return txt}
	var quoteString = function(str) {
		if (!quoteStrings) return str
		return '"'+ str.replace(new RegExp('"', 'g'),
			'\\"') +'"'}

	return expression.replace(/(%%)|%((?:p\.)+)?(-)?([kKtxywh]|n+|N+|i+|I+)/g,
		function(all, escaped, useParent, useReverse, flag) {
			if (escaped) return '%'
			var lyr = layer
			if (useParent) for (var j=useParent.length/2; j>0; j--) {
				lyr = lyr.parentGroup(); if (!lyr) return quoteStrings?null:'?';}

			if (flag.substr(0,1)=='n') return zeroPad(flag, !useReverse ? selectionCount-1-i : i)
			if (flag.substr(0,1)=='N') return zeroPad(flag, !useReverse ? selectionCount-i   : i+1)
			if (flag=='t') return quoteString(lyr.name())
			if (flag=='x') return lyr.frame().x()
			if (flag=='y') return lyr.frame().y()
			if (flag=='w') return lyr.frame().width()
			if (flag=='h') return lyr.frame().height()
			if (flag=='K') return quoteString(getLayerKind(lyr))
			if (flag=='k') return quoteString(getLayerKind(lyr).toLowerCase())

			var parentLyr = lyr.parentGroup()
			if (!parentLyr) return quoteStrings?null:'?'
			
			var siblings = parentLyr.layers()
			var indexInParent = parentLyr.indexOfLayer_(lyr)
			if (flag.substr(0,1)=='i') return zeroPad(flag, !useReverse ? siblings.length-indexInParent-1 : indexInParent)
			if (flag.substr(0,1)=='I') return zeroPad(flag, !useReverse ? siblings.length-indexInParent   : indexInParent+1)

			return all
		})
}

function getLayerKind(obj) {
	var objClass = obj.class()
	if (objClass == MSLayerGroup)
		return 'Group'

	var str = NSStringFromClass(objClass)
	if (str.substr(0,2)=='MS') str = str.substr(2)
	if (str.substr(-5)=='Group' || str.substr(-5)=='Layer')
		str = str.substr(0,str.length-5)

	if (str=='SymbolInstance') return 'Symbol'
	if (str.length>5 && (str.substr(-5)=='Shape' || str=='ShapePath')) return 'Path'

	return str}


function showRegExHelpAlert(isSearch) {
	var title = !isSearch ?
		'Replace more powerful with Regular Expressions':
		'Search and select more powerful with Regular Expressions'
	var preMessage = !isSearch ?
		'Write what you\'re searching for in the first field, and what to replace matches with in the second.':
		'The selected layers/artboards/groups/... (or their descendants) will be filtered on the regex in the first box, and the expression in the last box. If nothing is selected, it searches through all layers in the current page.'
	var middleMessage = !isSearch ?
		'Use parenthesis to create capture groups; eg. to rename '
		+'"item 57 flower" to "flower-57", we could do find: "(\\d+) (\\w+)", replace with: "$2-$1". '
		+'$1 would reference to first capture group, that is, the number ("\\d+"), etc.'
		:
		'Use parenthesis to create capture groups; eg. filtering items like "item 57 flower"'
		+'using the regex  "item (\\d+)", and expression "$1 < 20 and (shape or group)"'
		+'would match "item 15", if it\'s also a shape or group layer, but not "item 22".'
		+' Be fast! hit âŒ˜â†©ï¸Ž to access the second button.'
		+'\n'
		+'\nExpressions are written in cool JavaScript. Compare capture groups and use variables like:'
	var variablesMessage = !isSearch ?
		'Variables are also supported, in the replace box (see GitHub for more):':
		'$1 == %p.p.t and (artboard or group or shape or slice or bitmap or text or path)\n'

	var msgAlert = showAlert({
		title: title,
		message: preMessage
			+' Leave the textfield empty to find/replace everything/with nothing.'
			+' RegExp are very powerful. To learn more and try some more, check out regexr.com. Tiny cheatsheet:'
			+'\n'
			+'\n'+	'.'								+'\t\t\t\t'+	' Match any character once'
			+'\n'+	'[hk5]'						+'\t\t\t\t'+	' Match any of h, k, or 5 once'
			+'\n'+	'\\w, \\d, \\s'			+'\t\t\t'+	' word character, digit, whitespace'
			+'\n'+	'\\., \\*, \\\\, \\('+'\t\t\t'+	' special characters needs to be escaped'
			+'\n'+	'a*, a+, a?'				+'\t\t\t'+	' 0 or more, 1 or more, 0 or 1'
			+'\n'+	'a{5}, a{2,}, a{1,3}'		+'\t'+	' exactly five, two or more, between one & three'
			+'\n'+	'a+?, a{2,}?'					+'\t\t'+	' match as few as possible'
			+'\n'+	'ab|cd'							+'\t\t\t'+	' match ab or cd'
			+'\n'
			+'\n'+ middleMessage
			+'\n'+ variablesMessage
			+'\n'+'index  (%N)'+' \tin parent  (%i/I)'+'\t\tdimensions (%w/h/x/y)'+' title (%t)' +'   kind (%k/K)'
			+'\n'+'from 0 (%n)'+' \treversed  (%-N/n)'+ ' \tparent properties  (%p.t/w) '+' % (%%)'
			+'\n'
			+'\n'+'Navigate the layer tree using Relative find paths:'
				   +' Write ":"" in the end of a search expression, followed by any of the following, stacked how many times you desire, to navigate the layer tree:'
			+'\n'+' > all children, < parent, 2 third layer in parent (counting starts at 0), 2n every other layer, +1 layer after, -4 layer four layers before, t.ex bg:-1>3>2n+1'
			,
		buttons: ['OK', 'GitHub', 'Regexr.com'],
		width: 520,
		icon:scriptPath+'Resources/icons/layerRenamerSelect.png'
	})
	if (msgAlert.canceled) return;
	var link = msgAlert.selected.title == 'Regexr.com' ? 'http://regexr.com':
		'https://github.com/LeonardPauli/LayerRenamer'
	NSWorkspace.sharedWorkspace()
		.openURL(NSURL.URLWithString(link))
}